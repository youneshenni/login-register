import { Request, RequestHandler, Response } from 'express';
import { ParamsDictionary } from 'express-serve-static-core';
import { z, ZodEffects, ZodError, ZodSchema, ZodType, ZodTypeDef } from 'zod';
declare type NonReadOnly<T> = {
    -readonly [P in keyof T]: NonReadOnly<T[P]>;
};
export declare function stripReadOnly<T>(readOnlyItem: T): NonReadOnly<T>;
export declare type RequestValidation<TParams, TQuery, TBody> = {
    params?: ZodSchema<TParams>;
    query?: ZodSchema<TQuery>;
    body?: ZodSchema<TBody>;
};
export declare type RequestProcessing<TParams, TQuery, TBody> = {
    params?: ZodEffects<any, TParams>;
    query?: ZodEffects<any, TQuery>;
    body?: ZodEffects<any, TBody>;
};
export declare type TypedRequest<TParams extends ZodType<any, ZodTypeDef, any>, TQuery extends ZodType<any, ZodTypeDef, any>, TBody extends ZodType<any, ZodTypeDef, any>> = Request<z.infer<TParams>, any, z.infer<TBody>, z.infer<TQuery>>;
export declare type TypedRequestBody<TBody extends ZodType<any, ZodTypeDef, any>> = Request<ParamsDictionary, any, z.infer<TBody>, any>;
export declare type TypedRequestParams<TParams extends ZodType<any, ZodTypeDef, any>> = Request<z.infer<TParams>, any, any, any>;
export declare type TypedRequestQuery<TQuery extends ZodType<any, ZodTypeDef, any>> = Request<ParamsDictionary, any, any, z.infer<TQuery>>;
declare type ErrorListItem = {
    type: 'Query' | 'Params' | 'Body';
    errors: ZodError<any>;
};
export declare const sendErrors: (errors: Array<ErrorListItem>, res: Response) => void;
export declare const sendError: (error: ErrorListItem, res: Response) => void;
export declare function processRequestBody<TBody>(effects: ZodSchema<TBody>): RequestHandler<ParamsDictionary, any, TBody, any>;
export declare function processRequestBody<TBody>(effects: ZodEffects<any, TBody>): RequestHandler<ParamsDictionary, any, TBody, any>;
export declare function processRequestParams<TParams>(effects: ZodSchema<TParams>): RequestHandler<TParams, any, any, any>;
export declare function processRequestParams<TParams>(effects: ZodEffects<any, TParams>): RequestHandler<TParams, any, any, any>;
export declare function processRequestQuery<TQuery>(effects: ZodSchema<TQuery>): RequestHandler<ParamsDictionary, any, any, TQuery>;
export declare function processRequestQuery<TQuery>(effects: ZodEffects<any, TQuery>): RequestHandler<ParamsDictionary, any, any, TQuery>;
export declare function processRequest<TParams = any, TQuery = any, TBody = any>(schemas: RequestProcessing<TParams, TQuery, TBody>): RequestHandler<TParams, any, TBody, TQuery>;
export declare function processRequest<TParams = any, TQuery = any, TBody = any>(schemas: RequestValidation<TParams, TQuery, TBody>): RequestHandler<TParams, any, TBody, TQuery>;
export declare const validateRequestBody: <TBody>(zodSchema: ZodSchema<TBody>) => RequestHandler<ParamsDictionary, any, TBody, any>;
export declare const validateRequestParams: <TParams>(zodSchema: ZodSchema<TParams>) => RequestHandler<TParams, any, any, any>;
export declare const validateRequestQuery: <TQuery>(zodSchema: ZodSchema<TQuery>) => RequestHandler<ParamsDictionary, any, any, TQuery>;
export declare const validateRequest: <TParams = any, TQuery = any, TBody = any>(schemas: RequestValidation<TParams, TQuery, TBody>) => RequestHandler<TParams, any, TBody, TQuery>;
export {};
